#[derive(Debug)]
pub enum Token<'a> {
    Int,
    Real,
    Char,
    Bool,
    Identifier(&'a str),
    If,
    While,
    For,
    To,
    End,
    Then,
    Extern,
    Function,
    Do,
    Return,
    Use,
    StrLiteral(&'a str),
    IntLiteral(u32),
    FloatLiteral(f32),
    True,
    False,
    Equal,
    NotEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,
    And,
    Or,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Shr,
    Shl,
    Assign,
    AddAssign,
    SubAssign,
    MulAssign,
    DivAssign,
    OpenParen,
    CloseParen,
    OpenBracket,
    CloseBracket,
    Comma,
    Colon,
    SemiColon,
    Ampersand,
    Eof,
}

impl<'a> Token<'a> {
    pub fn from_str(s: &'a str) -> Self {
        match s {
            "int" => Self::Int,
            "real" => Self::Real,
            "char" => Self::Char,
            "bool" => Self::Bool,
            "if" => Self::If,
            "while" => Self::While,
            "for" => Self::For,
            "to" => Self::To,
            "then" => Self::Then,
            "extern" => Self::Extern,
            "func" => Self::Function,
            "do" => Self::Do,
            "return" => Self::Return,
            "end" => Self::End,
            "use" => Self::Use,
            "true" => Self::True,
            "false" => Self::False,
            s => Self::Identifier(s),
        }
    }
}
